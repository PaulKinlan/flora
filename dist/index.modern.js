const e=new TextEncoder,a=async(e,a)=>{const n=e.getReader();return n.read().then(function e(t){if(t.done)return;const r=t.value,i=r instanceof Int8Array||r instanceof Int16Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Uint16Array||r instanceof Uint32Array||r instanceof Float32Array||r instanceof Float64Array;return(!1===i&&t.value||i&&r.length>0)&&a.enqueue(t.value),n.read().then(e)})},n=async(t,r)=>{if(t instanceof globalThis.ReadableStream)await a(t,r);else if(t instanceof Promise){let e;e=await t,e instanceof globalThis.ReadableStream?await a(e,r):await n(e,r)}else if(Array.isArray(t))for(let e of t)await n(e,r);else t&&r.enqueue(e.encode(t))};export default async(a,...t)=>("ReadableStream"in globalThis==0&&await import("web-streams-polyfill"),new globalThis.ReadableStream({start(r){!async function(){let i=0;for(;i<t.length;)r.enqueue(e.encode(a[i])),await n(t[i],r),i++;r.enqueue(e.encode(a[i])),r.close()}()}}));
//# sourceMappingURL=index.modern.js.map
